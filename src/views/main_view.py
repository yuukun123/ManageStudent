from PyQt5 import uic
from PyQt5.QtCore import QSize, Qt
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QMainWindow, QMessageBox, QWidget

from src.controllers.buttonController import buttonController
from src.controllers.dashboard.dashboardController import dashboardController
from src.controllers.student.studentListController import StudentListController
from src.controllers.student.studentScoreController import StudentScoreController
from src.controllers.classroom.classroomController import ClassroomController

from src.models.user_model import get_user_by_username, get_teacher_context
from src.utils.changeTab import MenuNavigator
from src.views.moveable_window import MoveableWindow
from src.controllers.logoutController import LogoutController
from src.utils.ui_utils import set_user_info


class MainWindow(QMainWindow, MoveableWindow):
    def __init__(self, username):
        super().__init__()
        uic.loadUi("../UI/forms/mainWindowApp.ui", self)
        MoveableWindow.__init__(self)

        self.setResizeOnDrag(True, mini_size=QSize(1434, 854))

        # K·∫øt n·ªëi t√≠n hi·ªáu t·ª´ MoveableWindow ƒë·ªÉ c·∫≠p nh·∫≠t UI c·ªßa n√∫t
        self.size_state_changed.connect(self._update_mini_restore_button_ui)

        # 4. C·∫¨P NH·∫¨T GIAO DI·ªÜN N√öT B·∫§M L·∫¶N ƒê·∫¶U
        self._update_mini_restore_button_ui()

        # TH√äM C√ÅC D√íNG N√ÄY ƒê·ªÇ QU·∫¢N L√ù NG∆Ø·ªúI D√ôNG
        self.current_username = username
        self.teacher_context = None
        self._load_user_context()  # T·∫£i context ngay khi kh·ªüi t·∫°o
        # -------------------

        # self.header_4 = QWidget()
        # self.header_4.setObjectName("header_4")
        # self.verticalLayout_2.addWidget(self.header_4)
        self.header_4.hide()

        set_user_info(self.userInfoLabel, username)
        self.invisible()
        self.buttonController = buttonController(self)
        self.logout_controller = LogoutController(self)
        self.logoutBtn.clicked.connect(lambda: self.logout_controller.handle_logout())
        self.closeBtn.clicked.connect(self.buttonController.handle_close)
        self.hiddenBtn.clicked.connect(self.buttonController.handle_hidden)
        self.maximizeBtn.clicked.connect(self.buttonController.toggle_maximize_restore)
        self.restoreBtn.clicked.connect(self.buttonController.toggle_maximize_restore)
        self.restoreBtn.hide()

        buttons = [
            self.dashboard, self.student, self.scores,
            self.classroom, self.subject, self.notification
        ]
        index_map = {btn: i for i, btn in enumerate(buttons)}
        self.menu_nav = MenuNavigator(self.stackedWidget, buttons, index_map, default_button=self.dashboard)

        self.dashboardController = dashboardController(parent=self)

        self.classroomController = ClassroomController(
            self.area2,
            parent=self,
            # classroom_page = self.Classroom_page
        )

        self.studentListController = StudentListController(
            self.studentList,
            parent=self,
            student_page=self.Student_page
        )

        self.studentScoreController = StudentScoreController(
            self.scoresList,
            parent=self,
            edit_button=self.editScoreBtn,
            score_page=self.Scores_page
        )
        self.addScoreBtn.clicked.connect(self.studentScoreController.handle_add_button_clicked)
        self.editScoreBtn.clicked.connect(self.studentScoreController.handle_edit_button_clicked)

        self.stackedWidget.currentChanged.connect(self.on_tab_changed)

        # Ch·ªß ƒë·ªông t·∫£i Dashboard l·∫ßn ƒë·∫ßu ti√™n n·∫øu n√≥ l√† tab m·∫∑c ƒë·ªãnh
        if self.stackedWidget.currentWidget() == self.Dashboard_page:
            self.on_tab_changed(self.stackedWidget.currentIndex())

        self.disable_unfinished_features()
        self.on_tab_changed(self.stackedWidget.currentIndex())

    def mouseDoubleClickEvent(self, event):
        """
        B·∫Øt s·ª± ki·ªán double-click ƒë·ªÉ toggle mini-size v√† maximize.
        """
        if event.button() == Qt.LeftButton:
            # Double-click v√†o thanh ti√™u ƒë·ªÅ (v√≠ d·ª•: v√πng y < 50)
            if event.y() < 50:
                # ∆Øu ti√™n h√†nh ƒë·ªông maximize/restore tr∆∞·ªõc
                self.buttonController.toggle_maximize_restore()

    # TH√äM H√ÄM M·ªöI N√ÄY
    def _load_user_context(self):
        """L·∫•y th√¥ng tin v√† quy·ªÅn h·∫°n c·ªßa ng∆∞·ªùi d√πng t·ª´ database."""
        user_info = get_user_by_username(self.current_username)

        if not user_info:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng: {self.current_username}")
            QMessageBox.critical(self, "L·ªói", "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.")
            self.close()
            return

        role = user_info.get("role", "").lower()

        if role == "admin":
            print("üë§ Admin ƒëƒÉng nh·∫≠p. Full access mode.")
            self.user_context = {
                "username": self.current_username,
                "role": "admin",
                "teacher_info": None
            }
            self.teacher_context = None  # Gi·ªØ ƒë·ªÉ t∆∞∆°ng th√≠ch c≈©
        elif role == "teacher":
            self.teacher_context = get_teacher_context(self.current_username)
            if not self.teacher_context:
                QMessageBox.critical(self, "L·ªói ph√¢n quy·ªÅn", f"T√†i kho·∫£n '{self.current_username}' ch∆∞a ƒë∆∞·ª£c ph√¢n c√¥ng l·ªõp.")
                self.close()
                return

            print(f"‚úÖ ƒê√£ t·∫£i context cho gi√°o vi√™n: {self.teacher_context.get('teacher_name')}")
            print("üìã Chi ti·∫øt:", self.teacher_context)

            self.user_context = {
                "username": self.current_username,
                "role": "teacher",
                "teacher_info": self.teacher_context
            }
        else:
            print(f"‚ùå Vai tr√≤ kh√¥ng h·ª£p l·ªá: {role}")
            QMessageBox.critical(self, "L·ªói", "Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.")
            self.close()

    # CH·ªàNH S·ª¨A H√ÄM on_tab_changed
    def on_tab_changed(self, index):
        current_widget = self.stackedWidget.widget(index)

        # M·∫∑c ƒë·ªãnh m·ªôt ti√™u ƒë·ªÅ, ho·∫∑c ƒë·ªÉ tr·ªëng
        new_title = "Student Management System"

        if current_widget == self.Dashboard_page:
            # ƒê·∫∑t l·∫°i ti√™u ƒë·ªÅ
            new_title = "Dashboard"

            print("üìä ƒê√£ chuy·ªÉn ƒë·∫øn trang Dashboard")
            if not self.dashboardController._initialized_for_user:
                self.dashboardController.setup_for_user(self.teacher_context)

        elif current_widget == self.Student_page:
            # ƒê·∫∑t l·∫°i ti√™u ƒë·ªÅ
            new_title = "Student List"  # Ho·∫∑c "Danh s√°ch Sinh vi√™n"

            print("üìò ƒê√£ chuy·ªÉn ƒë·∫øn trang Student List")
            if not self.studentListController._initialized_for_user:
                self.studentListController.setup_for_user(self.teacher_context)

        elif current_widget == self.Scores_page:
            # ƒê·∫∑t l·∫°i ti√™u ƒë·ªÅ
            new_title = "Score Management"  # Ho·∫∑c "Qu·∫£n l√Ω ƒêi·ªÉm"

            print("üìù ƒê√£ chuy·ªÉn ƒë·∫øn trang Scores")
            if not self.studentScoreController._initialized_for_user:
                self.studentScoreController.setup_for_user(self.teacher_context)

        elif current_widget == self.Classroom_page:
            # ƒê·∫∑t l·∫°i ti√™u ƒë·ªÅ
            new_title = "Classroom Management"  # Ho·∫∑c "Qu·∫£n l√Ω L·ªõp"

            print("üìù ƒê√£ chuy·ªÉn ƒë·∫øn trang Classroom")
            if not self.classroomController._initialized_for_user:
                self.classroomController.setup_for_user(self.teacher_context)

        self.header_DBD.setText(new_title)

    def disable_unfinished_features(self):
        """V√¥ hi·ªáu h√≥a c√°c n√∫t menu cho c√°c t√≠nh nƒÉng ch∆∞a ho√†n thi·ªán."""

        # 1. V√¥ hi·ªáu h√≥a n√∫t
        self.notification.setEnabled(False)  # Gi·∫£ s·ª≠ objectName c·ªßa n√∫t l√† 'notification'
        self.subject.setEnabled(False)  # Gi·∫£ s·ª≠ objectName c·ªßa n√∫t l√† 'subject'

        # 2. (T√πy ch·ªçn) Th√™m Tooltip ƒë·ªÉ gi·∫£i th√≠ch cho ng∆∞·ªùi d√πng
        self.notification.setToolTip("T√≠nh nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn")
        self.subject.setToolTip("T√≠nh nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn")

        # 3. (T√πy ch·ªçn) Thay ƒë·ªïi style ƒë·ªÉ tr√¥ng "b·ªã v√¥ hi·ªáu h√≥a" r√µ h∆°n
        disabled_style = "background-color: #d3d3d3; color: #888888; border-radius: 6px;"
        self.notification.setStyleSheet(disabled_style)
        self.subject.setStyleSheet(disabled_style)

    def toggle_mini_restore(self):
        """
        Chuy·ªÉn ƒë·ªïi gi·ªØa k√≠ch th∆∞·ªõc mini v√† k√≠ch th∆∞·ªõc ban ƒë·∫ßu.
        ƒê∆∞·ª£c g·ªçi b·ªüi n√∫t b·∫•m ho·∫∑c double-click.
        """
        # B·ªè qua n·∫øu ƒëang ·ªü tr·∫°ng th√°i ph√≥ng to t·ªëi ƒëa
        if self.isMaximized():
            return

        if not self.resize_on_drag_enabled:
            return

        if self.is_mini_size:
            # N·∫øu ƒëang l√† mini, quay v·ªÅ h√¨nh d·∫°ng ban ƒë·∫ßu
            if self._original_geometry:
                self.setGeometry(self._original_geometry)
            self.is_mini_size = False
        else:
            # N·∫øu ƒëang l√† k√≠ch th∆∞·ªõc th∆∞·ªùng, l∆∞u h√¨nh d·∫°ng v√† chuy·ªÉn sang mini
            self._original_geometry = self.geometry()
            current_center = self._original_geometry.center()

            self.resize(self.mini_size)

            new_geo = self.frameGeometry()
            new_geo.moveCenter(current_center)
            self.move(new_geo.topLeft())

            self.is_mini_size = True

        # Sau khi thay ƒë·ªïi tr·∫°ng th√°i, c·∫≠p nh·∫≠t l·∫°i UI c·ªßa n√∫t
        self._update_mini_restore_button_ui()

    def _update_mini_restore_button_ui(self):
        """C·∫≠p nh·∫≠t icon v√† tooltip cho n√∫t toggle."""
        if self.is_mini_size:
            # Gi·∫£ s·ª≠ b·∫°n c√≥ 2 n√∫t ri√™ng bi·ªát gi·ªëng nh∆∞ maximize/restore
            # self.maximizeBtn.hide()
            # self.restoreBtn.show()

            self.restoreBtn.setIcon(QIcon("../UI/icons/copy.svg"))
        else:
            # ƒêang b√¨nh th∆∞·ªùng -> N√∫t ph·∫£i c√≥ ch·ª©c nƒÉng "thu nh·ªè"
            # self.maximizeBtn.show()
            # self.restoreBtn.hide()

            self.restoreBtn.setIcon(QIcon("../UI/icons/copy.svg"))



